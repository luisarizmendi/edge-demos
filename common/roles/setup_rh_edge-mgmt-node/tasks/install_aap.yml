---
- name: Prepare the AAP install
  become: true
  block: 
    - name: Set hostname
      hostname:
        name: "{{ node_fqdn }}"
        
    - name: Update /etc/hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ ansible_default_ipv4.address }} {{ node_fqdn }} {{ ansible_hostname }}"
        state: present
        regexp: "^{{ ansible_default_ipv4.address }}"

    - name: Set kernel parameter for hostname
      sysctl:
        name: kernel.hostname
        value: "{{ node_fqdn }}"
        state: present
        reload: yes

    - name: Get current repositories
      command: dnf repolist --enabled
      register: current_repos

    - name: Set default required repositories if not defined
      set_fact:
        required_repos:
          - rhel-9-for-x86_64-appstream-rpms
          - rhel-9-for-x86_64-baseos-rpms
      when: required_repos is not defined

    - name: Ensure required repositories are enabled
      community.general.dnf_config_manager:
        name: "{{ item }}"
        state: enabled
      loop: "{{ required_repos }}"
      when: item not in current_repos.stdout_lines

    - name: Install ansible-core
      ansible.builtin.dnf:
        name:
          - ansible-core
          - wget
          - git
          - rsync
        state: latest

    - name: Ensure directory exists for postinstall
      file:
        path: /home/{{ ansible_user }}/aap_postinstall
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

- name: Download AAP installer
  delegate_to: localhost
  become: false
  block: 
    - name: Include secrets file with offline_token
      include_vars:
        file: "../vars/secrets.yml"

    # https://access.redhat.com/articles/3626371#bgenerating-an-access-tokenb-4
    #
    # equivalent of curl https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token -d grant_type=refresh_token -d client_id=rhsm-api -d refresh_token=$offline_token
    - name: check if aap.tar.gz exists
      stat:
        path: "{{ playbook_dir }}/../files/aap.tar.gz"
        checksum_algorithm: sha256
      register: stat_var

    - name: Generating an access token
      uri:
        url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
        method: POST
        body_format: form-urlencoded
        return_content: true
        body:
          grant_type: "refresh_token"
          client_id: "rhsm-api"
          refresh_token: "{{ offline_token }}"
      register: temp_token
      until: temp_token is not failed
      retries: 15
      delay: 20
      when: not stat_var.stat.exists

    - name: Download aap.tar.gz
      get_url:
        url: "https://api.access.redhat.com/management/v1/images/{{ aap_sha_value }}/download"
        headers:
          accept: "application/json"
          Authorization: "Bearer {{ temp_token.json.access_token }}"
        dest: "{{ playbook_dir }}/../files/aap.tar.gz"
        checksum: "sha256: {{ aap_sha_value }}"
      register: download_aap_tarball
      until: download_aap_tarball is not failed
      retries: 15
      delay: 20
      when: not stat_var.stat.exists


- name: Copy AAP installer and manifest
  block: 
    - name: Create tmp directory to store AAP tar.gz
      tempfile:
        state: directory
        suffix: "aapbundle"
      register: tempdir

    - name: copy AAP tar.gz
      copy:
        src: "{{ aap_archive | default(playbook_dir + '/../files/aap.tar.gz') }}"
        dest: "{{ tempdir.path }}/aap.tar.gz"

    - name: Create directory for automation controller
      file:
        path: "/home/{{ ansible_user }}/aap_install"
        state: directory

    - name: Extract AAP tar.gz install
      unarchive:
        src: "{{ tempdir.path }}/aap.tar.gz"
        dest: "/home/{{ ansible_user }}/aap_install"
        remote_src: true
        extra_opts: ['--strip-components=1', '--show-stored-names']

    - name: copy AAP tar.gz
      copy:
        src: "{{ manifest_file | default(playbook_dir + '/../files/manifest.zip') }}"
        dest: "/home/{{ ansible_user }}/aap_install/manifest.zip"

- name: Install AAP
  block: 
    - name: Create the inventory file
      template:
        src: ../templates/aap_inventory.j2
        dest: /home/{{ ansible_user }}/aap_install/inventory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644
        
    - name: Run AAP installer
      shell: |
        cd /home/{{ ansible_user }}/aap_install
        ansible-playbook -i inventory ansible.containerized_installer.install > /home/{{ ansible_user }}/.aap_install.log 2>&1

    - name: Open TCP ports for EDA
      become: true
      firewalld:
        port: "{{ eda_webhook_port | default('5000') }}/tcp"
        permanent: yes
        state: enabled
        zone: public

    - name: Reload firewall
      become: true
      ansible.builtin.systemd:
        name: firewalld
        state: reloaded
