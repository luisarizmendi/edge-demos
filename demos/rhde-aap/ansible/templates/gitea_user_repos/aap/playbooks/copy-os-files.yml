
{% raw %}
---
- name: Clone GitHub Repository and Copy Files
  hosts:
    - all
  gather_facts: no

  vars:
    local_clone_path: "/tmp/repo_clone"
    target_path: "/etc"
    inotify_wait_file: "/root/inotify-wait"

  tasks:
    - name: Get the templates
      delegate_to: localhost
      block:
        - name: Remove the local clone
          file:
            path: "{{ local_clone_path }}-{{ ansible_host }}"
            state: absent


        - name: Create temp directory
          file:
            path: "{{ local_clone_path }}-{{ ansible_host }}"
            state: directory

        - name: Extract protocol from git_repo_url
          set_fact:
            git_repo_url_http: "{{ git_repo_url | regex_search('^(http|https)') | default('') }}"

        - name: Remove protocol from git_repo_url
          set_fact:
            git_repo_url_nohttp: "{{ git_repo_url | regex_replace('^(http|https)://', '') }}"
    

        - name: Clone repo 
          ansible.builtin.shell:            
            cmd: "git clone {{ git_repo_url_http }}://{{  git_user }}:'{{ git_password }}'@{{ git_repo_url_nohttp }} {{ local_clone_path }}-{{ ansible_host }}"

        - name: Set template path
          set_fact:
            _template_src_path: "{{ local_clone_path }}-{{ ansible_host }}/{{ env }}/{{ path_prefix }}/{{ path }}"

        - name: Find template files
          ansible.builtin.find:
            paths: "{{ _template_src_path }}"
            patterns: "*"
            recurse: yes
            hidden: true            
            file_type: file 
          register: _template_files

        - name: Crop template file paths
          set_fact:
            _template_files_crop: "{{ _template_files.files | map(attribute='path') | map('regex_replace', '^' + _template_src_path + '/?', '') | list }}"

        - name: Extract template directories
          set_fact:
            _template_directories: "{{ _template_files_crop | map('dirname') | unique | list }}"


    - name: Be sure that the directories exist
      file:
        path: "{{ item }}"
        state: directory
      loop: "{{ _template_directories }}"


    - name: Copy template files to admin repos
      ansible.builtin.template:
        src: "{{ _template_src_path }}/{{ item }}"
        dest: "/{{ item }}"
      loop: "{{ _template_files_crop }}"

    
    - name: Remove the local clone
      delegate_to: localhost
      file:
        path: "{{ local_clone_path }}-{{ ansible_host }}"
        state: absent

      # So it does run the workflow again when a new change happens
    - name: Remove inotify wait
      file:
        path: "{{ inotify_wait_file }}"
        state: absent

{% endraw %}